// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_INCLUDED_chat_2eproto
#define PROTOBUF_INCLUDED_chat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto 

namespace protobuf_chat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_2eproto
namespace chatpb {
class C2SLogin;
class C2SLoginDefaultTypeInternal;
extern C2SLoginDefaultTypeInternal _C2SLogin_default_instance_;
class C2SRegister;
class C2SRegisterDefaultTypeInternal;
extern C2SRegisterDefaultTypeInternal _C2SRegister_default_instance_;
class S2CLogin;
class S2CLoginDefaultTypeInternal;
extern S2CLoginDefaultTypeInternal _S2CLogin_default_instance_;
class S2CRegister;
class S2CRegisterDefaultTypeInternal;
extern S2CRegisterDefaultTypeInternal _S2CRegister_default_instance_;
}  // namespace chatpb
namespace google {
namespace protobuf {
template<> ::chatpb::C2SLogin* Arena::CreateMaybeMessage<::chatpb::C2SLogin>(Arena*);
template<> ::chatpb::C2SRegister* Arena::CreateMaybeMessage<::chatpb::C2SRegister>(Arena*);
template<> ::chatpb::S2CLogin* Arena::CreateMaybeMessage<::chatpb::S2CLogin>(Arena*);
template<> ::chatpb::S2CRegister* Arena::CreateMaybeMessage<::chatpb::S2CRegister>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chatpb {

// ===================================================================

class C2SLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatpb.C2SLogin) */ {
 public:
  C2SLogin();
  virtual ~C2SLogin();

  C2SLogin(const C2SLogin& from);

  inline C2SLogin& operator=(const C2SLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2SLogin(C2SLogin&& from) noexcept
    : C2SLogin() {
    *this = ::std::move(from);
  }

  inline C2SLogin& operator=(C2SLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SLogin* internal_default_instance() {
    return reinterpret_cast<const C2SLogin*>(
               &_C2SLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(C2SLogin* other);
  friend void swap(C2SLogin& a, C2SLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2SLogin* New() const final {
    return CreateMaybeMessage<C2SLogin>(NULL);
  }

  C2SLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<C2SLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const C2SLogin& from);
  void MergeFrom(const C2SLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:chatpb.C2SLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatpb.S2CLogin) */ {
 public:
  S2CLogin();
  virtual ~S2CLogin();

  S2CLogin(const S2CLogin& from);

  inline S2CLogin& operator=(const S2CLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2CLogin(S2CLogin&& from) noexcept
    : S2CLogin() {
    *this = ::std::move(from);
  }

  inline S2CLogin& operator=(S2CLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CLogin* internal_default_instance() {
    return reinterpret_cast<const S2CLogin*>(
               &_S2CLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(S2CLogin* other);
  friend void swap(S2CLogin& a, S2CLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2CLogin* New() const final {
    return CreateMaybeMessage<S2CLogin>(NULL);
  }

  S2CLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2CLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2CLogin& from);
  void MergeFrom(const S2CLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chatpb.ERetType eRet = 1;
  void clear_eret();
  static const int kERetFieldNumber = 1;
  ::chatpb::ERetType eret() const;
  void set_eret(::chatpb::ERetType value);

  // @@protoc_insertion_point(class_scope:chatpb.S2CLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int eret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class C2SRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatpb.C2SRegister) */ {
 public:
  C2SRegister();
  virtual ~C2SRegister();

  C2SRegister(const C2SRegister& from);

  inline C2SRegister& operator=(const C2SRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2SRegister(C2SRegister&& from) noexcept
    : C2SRegister() {
    *this = ::std::move(from);
  }

  inline C2SRegister& operator=(C2SRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SRegister* internal_default_instance() {
    return reinterpret_cast<const C2SRegister*>(
               &_C2SRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(C2SRegister* other);
  friend void swap(C2SRegister& a, C2SRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2SRegister* New() const final {
    return CreateMaybeMessage<C2SRegister>(NULL);
  }

  C2SRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<C2SRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const C2SRegister& from);
  void MergeFrom(const C2SRegister& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:chatpb.C2SRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class S2CRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chatpb.S2CRegister) */ {
 public:
  S2CRegister();
  virtual ~S2CRegister();

  S2CRegister(const S2CRegister& from);

  inline S2CRegister& operator=(const S2CRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2CRegister(S2CRegister&& from) noexcept
    : S2CRegister() {
    *this = ::std::move(from);
  }

  inline S2CRegister& operator=(S2CRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CRegister* internal_default_instance() {
    return reinterpret_cast<const S2CRegister*>(
               &_S2CRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(S2CRegister* other);
  friend void swap(S2CRegister& a, S2CRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2CRegister* New() const final {
    return CreateMaybeMessage<S2CRegister>(NULL);
  }

  S2CRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2CRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2CRegister& from);
  void MergeFrom(const S2CRegister& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .chatpb.ERetType eRet = 1;
  void clear_eret();
  static const int kERetFieldNumber = 1;
  ::chatpb::ERetType eret() const;
  void set_eret(::chatpb::ERetType value);

  // @@protoc_insertion_point(class_scope:chatpb.S2CRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int eret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2SLogin

// bytes username = 1;
inline void C2SLogin::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SLogin::username() const {
  // @@protoc_insertion_point(field_get:chatpb.C2SLogin.username)
  return username_.GetNoArena();
}
inline void C2SLogin::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatpb.C2SLogin.username)
}
#if LANG_CXX11
inline void C2SLogin::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chatpb.C2SLogin.username)
}
#endif
inline void C2SLogin::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatpb.C2SLogin.username)
}
inline void C2SLogin::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatpb.C2SLogin.username)
}
inline ::std::string* C2SLogin::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:chatpb.C2SLogin.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SLogin::release_username() {
  // @@protoc_insertion_point(field_release:chatpb.C2SLogin.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SLogin::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chatpb.C2SLogin.username)
}

// bytes password = 2;
inline void C2SLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SLogin::password() const {
  // @@protoc_insertion_point(field_get:chatpb.C2SLogin.password)
  return password_.GetNoArena();
}
inline void C2SLogin::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatpb.C2SLogin.password)
}
#if LANG_CXX11
inline void C2SLogin::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chatpb.C2SLogin.password)
}
#endif
inline void C2SLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatpb.C2SLogin.password)
}
inline void C2SLogin::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatpb.C2SLogin.password)
}
inline ::std::string* C2SLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chatpb.C2SLogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SLogin::release_password() {
  // @@protoc_insertion_point(field_release:chatpb.C2SLogin.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SLogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chatpb.C2SLogin.password)
}

// -------------------------------------------------------------------

// S2CLogin

// .chatpb.ERetType eRet = 1;
inline void S2CLogin::clear_eret() {
  eret_ = 0;
}
inline ::chatpb::ERetType S2CLogin::eret() const {
  // @@protoc_insertion_point(field_get:chatpb.S2CLogin.eRet)
  return static_cast< ::chatpb::ERetType >(eret_);
}
inline void S2CLogin::set_eret(::chatpb::ERetType value) {
  
  eret_ = value;
  // @@protoc_insertion_point(field_set:chatpb.S2CLogin.eRet)
}

// -------------------------------------------------------------------

// C2SRegister

// bytes username = 1;
inline void C2SRegister::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SRegister::username() const {
  // @@protoc_insertion_point(field_get:chatpb.C2SRegister.username)
  return username_.GetNoArena();
}
inline void C2SRegister::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatpb.C2SRegister.username)
}
#if LANG_CXX11
inline void C2SRegister::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chatpb.C2SRegister.username)
}
#endif
inline void C2SRegister::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatpb.C2SRegister.username)
}
inline void C2SRegister::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatpb.C2SRegister.username)
}
inline ::std::string* C2SRegister::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:chatpb.C2SRegister.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SRegister::release_username() {
  // @@protoc_insertion_point(field_release:chatpb.C2SRegister.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SRegister::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chatpb.C2SRegister.username)
}

// bytes password = 2;
inline void C2SRegister::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& C2SRegister::password() const {
  // @@protoc_insertion_point(field_get:chatpb.C2SRegister.password)
  return password_.GetNoArena();
}
inline void C2SRegister::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chatpb.C2SRegister.password)
}
#if LANG_CXX11
inline void C2SRegister::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chatpb.C2SRegister.password)
}
#endif
inline void C2SRegister::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chatpb.C2SRegister.password)
}
inline void C2SRegister::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chatpb.C2SRegister.password)
}
inline ::std::string* C2SRegister::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chatpb.C2SRegister.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* C2SRegister::release_password() {
  // @@protoc_insertion_point(field_release:chatpb.C2SRegister.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void C2SRegister::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chatpb.C2SRegister.password)
}

// -------------------------------------------------------------------

// S2CRegister

// .chatpb.ERetType eRet = 1;
inline void S2CRegister::clear_eret() {
  eret_ = 0;
}
inline ::chatpb::ERetType S2CRegister::eret() const {
  // @@protoc_insertion_point(field_get:chatpb.S2CRegister.eRet)
  return static_cast< ::chatpb::ERetType >(eret_);
}
inline void S2CRegister::set_eret(::chatpb::ERetType value) {
  
  eret_ = value;
  // @@protoc_insertion_point(field_set:chatpb.S2CRegister.eRet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatpb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_2eproto
